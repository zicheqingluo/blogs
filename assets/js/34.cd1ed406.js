(window.webpackJsonp=window.webpackJsonp||[]).push([[34],{485:function(t,r,a){"use strict";a.r(r);var s=a(1),e=Object(s.a)({},(function(){var t=this,r=t._self._c;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h2",{attrs:{id:"pprof是什么"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#pprof是什么"}},[t._v("#")]),t._v(" PProf是什么")]),t._v(" "),r("p",[t._v("pprof 是用于可视化和分析性能分析数据的工具。")]),t._v(" "),r("p",[t._v("Profiling 是指在程序执行过程中，收集能够反映程序执行状态的数据。\n在软件工程中，性能分析（performance analysis，也称为 profiling），是以收集程序运行时信息为手段研究程序行为的分析方法，是一种动态程序分析的方法")]),t._v(" "),r("p",[t._v("go的PProf 主要涉及两个包：")]),t._v(" "),r("ul",[r("li",[t._v('net/http/pprof：只是使用runtime/pprof包来进行封装了一下，并在http端口上暴露出来。使用 net/http/pprof 可以做到直接看到当前 web 服务的状态，包括 CPU 占用情况和内存使用情况等。如果服务是一直运行的，如 web 应用，可以很方便的使用这种方式 import "net/http/pprof"。')]),t._v(" "),r("li",[t._v("runtime/pprof: pprof开启后，每隔一段时间就会收集下当前的堆栈信息，获取各个函数占用的CPU以及内存资源；最后通过对这些采样数据进行分析，形成一个性能分析报告。适用于：对于本地只跑一次的程序，例如程序中的某一函数调优，调用 pprof 包提供的函数，手动开启性能数据采集。")])]),t._v(" "),r("h2",{attrs:{id:"go-pprof可以分析哪些指标"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#go-pprof可以分析哪些指标"}},[t._v("#")]),t._v(" go PProf可以分析哪些指标")]),t._v(" "),r("ul",[r("li",[t._v("CPU Profiling：CPU 分析，按照一定的频率采集所监听的应用程序 CPU（含寄存器）的使用情况，可确定应用程序在主动消耗 CPU 周期时花费时间的位置")]),t._v(" "),r("li",[t._v("Memory Profiling：内存分析，在应用程序进行堆分配时记录堆栈跟踪，用于监视当前和历史内存使用情况，以及检查内存泄漏")]),t._v(" "),r("li",[t._v("Block Profiling：阻塞分析，记录 goroutine 阻塞等待同步（包括定时器通道）的位置")]),t._v(" "),r("li",[t._v("Mutex Profiling：互斥锁分析，报告互斥锁的竞争情况")])]),t._v(" "),r("h2",{attrs:{id:"如何使用"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#如何使用"}},[t._v("#")]),t._v(" 如何使用")]),t._v(" "),r("h3",{attrs:{id:"工具型应用"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#工具型应用"}},[t._v("#")]),t._v(" 工具型应用")]),t._v(" "),r("p",[t._v("如果你的应用程序是运行一段时间就结束退出类型。那么最好的办法是在应用退出的时候把 profiling 的报告保存到文件中，进行分析。对于这种情况，可以使用"),r("code",[t._v("runtime/pprof")]),t._v("库。 首先在代码中导入"),r("code",[t._v("runtime/pprof")]),t._v("工具：")]),t._v(" "),r("div",{staticClass:"language-go line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-go"}},[r("code",[r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token string"}},[t._v('"runtime/pprof"')]),t._v("\n")])]),t._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[t._v("1")]),r("br")])]),r("h3",{attrs:{id:"cpu性能分析"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#cpu性能分析"}},[t._v("#")]),t._v(" CPU性能分析")]),t._v(" "),r("p",[t._v("开启CPU性能分析：")]),t._v(" "),r("div",{staticClass:"language-go line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-go"}},[r("code",[t._v("pprof"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),r("span",{pre:!0,attrs:{class:"token function"}},[t._v("StartCPUProfile")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("w io"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Writer"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[t._v("1")]),r("br")])]),r("p",[t._v("停止CPU性能分析：")]),t._v(" "),r("div",{staticClass:"language-go line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-go"}},[r("code",[t._v("pprof"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),r("span",{pre:!0,attrs:{class:"token function"}},[t._v("StopCPUProfile")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[t._v("1")]),r("br")])]),r("p",[t._v("应用执行结束后，就会生成一个文件，保存了我们的 CPU profiling 数据。得到采样数据之后，使用"),r("code",[t._v("go tool pprof")]),t._v("工具进行CPU性能分析。")]),t._v(" "),r("h3",{attrs:{id:"内存性能优化"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#内存性能优化"}},[t._v("#")]),t._v(" 内存性能优化")]),t._v(" "),r("p",[t._v("记录程序的堆栈信息")]),t._v(" "),r("div",{staticClass:"language-go line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-go"}},[r("code",[t._v("pprof"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),r("span",{pre:!0,attrs:{class:"token function"}},[t._v("WriteHeapProfile")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("w io"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Writer"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])]),t._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[t._v("1")]),r("br"),r("span",{staticClass:"line-number"},[t._v("2")]),r("br")])]),r("h3",{attrs:{id:"服务型应用"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#服务型应用"}},[t._v("#")]),t._v(" 服务型应用")]),t._v(" "),r("p",[t._v("如果你使用的是gin框架，那么推荐使用"),r("a",{attrs:{href:"https://github.com/gin-contrib/pprof",target:"_blank",rel:"nofollow noopener noreferrer"}},[t._v("github.com/gin-contrib/pprof"),r("OutboundLink")],1),t._v("，在代码中通过以下命令注册pprof相关路由。")]),t._v(" "),r("div",{staticClass:"language-go line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-go"}},[r("code",[t._v("pprof"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),r("span",{pre:!0,attrs:{class:"token function"}},[t._v("Register")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("router"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[t._v("1")]),r("br")])]),r("p",[t._v("端口假设设置的为6060")]),t._v(" "),r("p",[t._v("访问方式：http://{ip}:6060/debug/pprof\n比如本地： http://127.0.0.1:6060/debug/pprof/")]),t._v(" "),r("h4",{attrs:{id:"go-pprof页指标"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#go-pprof页指标"}},[t._v("#")]),t._v(" Go pprof页指标")]),t._v(" "),r("p",[t._v("打开页面后，我们看到的是go pprof提供的所有指标类型。以一个列表的形式展示，第一列Count数量，第二列Profile 类型。\n其中allocs、goroutine、threadcreate 这种可直接展示结果，profile、heap没有展示，点击详情后开始采样。\n比如，点击 profile 后，跳转： $HOST:$PORT/debug/pprof/profile ，默认进行 30s 的 CPU Profiling，得到一个分析用的 profile 文件。")]),t._v(" "),r("p",[t._v("如果遇到错误，表示采样时长大于了 server.writetimeout。\nprofile duration exceeds server's WriteTimeout")]),t._v(" "),r("p",[t._v("conf/config.yam 中 server相关配置，表示整个 serverHTTP接口的时间，\n如果采样时间大于30s 必定会超时，所以就不用进行采样了，直接返回错误。")]),t._v(" "),r("p",[t._v("一般情况下我们可手动指定采样时间：\n"),r("a",{attrs:{href:"http://127.0.0.1:6060/debug/pprof/profile?seconds=1",target:"_blank",rel:"nofollow noopener noreferrer"}},[t._v("http://127.0.0.1:6060/debug/pprof/profile?seconds=1\n"),r("OutboundLink")],1),t._v("参数seconds表示采样时长。默认seconds=30s。")]),t._v(" "),r("ul",[r("li",[t._v("cpu（CPU Profiling）: $HOST/debug/pprof/profile，默认进行 30s 的 CPU Profiling，得到一个分析用的 profile 文件")]),t._v(" "),r("li",[t._v("block（Block Profiling）：$HOST/debug/pprof/block，查看导致阻塞同步的堆栈跟踪")]),t._v(" "),r("li",[t._v("goroutine：$HOST/debug/pprof/goroutine，查看当前所有运行的 goroutines 堆栈跟踪")]),t._v(" "),r("li",[t._v("heap（Memory Profiling）: $HOST/debug/pprof/heap，查看活动对象的内存分配情况")]),t._v(" "),r("li",[t._v("mutex（Mutex Profiling）：$HOST/debug/pprof/mutex，查看导致互斥锁的竞争持有者的堆栈跟踪")]),t._v(" "),r("li",[t._v("threadcreate：$HOST/debug/pprof/threadcreate，查看创建新OS线程的堆栈跟踪")])]),t._v(" "),r("h2",{attrs:{id:"如何在web-ui查看"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#如何在web-ui查看"}},[t._v("#")]),t._v(" 如何在web ui查看")]),t._v(" "),r("p",[t._v("pprof 可以用来通过多种方式来分析符合 profile.proto 格式的profiling 的数据，比如命令行交互方式、web ui方式、导出text report的方式等。\nprofile.proto 是用来描述一组调用堆栈和符号化信息的protobuffer，有关协议缓冲区的详细信息，请参阅"),r("a",{attrs:{href:"https://developers.google.com/protocol-buffers",target:"_blank",rel:"nofollow noopener noreferrer"}},[t._v("https://developers.google.com/protocol-buffers\n"),r("OutboundLink")],1),t._v("只要符合该格式的数据都可以用pprof工具进行分析。")]),t._v(" "),r("p",[t._v("pprof比较常用的方式是web ui，可读性较好。本文主要以web ui方式讲解下详细的字段值。")]),t._v(" "),r("h3",{attrs:{id:"安装graphviz"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#安装graphviz"}},[t._v("#")]),t._v(" 安装Graphviz")]),t._v(" "),r("p",[t._v("安装Graphviz（ http://www.graphviz.org/ ）后，可以以图表的方式打开，可读性更好。")]),t._v(" "),r("h4",{attrs:{id:"mac安装"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#mac安装"}},[t._v("#")]),t._v(" "),r("strong",[t._v("mac安装")])]),t._v(" "),r("p",[t._v("brew install graphviz 大概率是不会成功")]),t._v(" "),r("p",[t._v("所以使用port命令安装。")]),t._v(" "),r("ul",[r("li",[t._v("点击下载 "),r("a",{attrs:{href:"https://www.macports.org/install.php",target:"_blank",rel:"nofollow noopener noreferrer"}},[t._v("port"),r("OutboundLink")],1)]),t._v(" "),r("li",[t._v("安装graphviz "),r("code",[t._v("sudo port install graphviz")])]),t._v(" "),r("li",[r("code",[t._v("dot -V")]),t._v(" 输入版本graphviz即安装成功")])]),t._v(" "),r("h3",{attrs:{id:"使用"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#使用"}},[t._v("#")]),t._v(" 使用")]),t._v(" "),r("p",[t._v("命令行启动，格式：go tool pprof  -http=host:port  pprof地址")]),t._v(" "),r("p",[t._v("host可省略,默认为localhost，port也可省略，会随机分配一个可用端口。")]),t._v(" "),r("p",[t._v("示例：")]),t._v(" "),r("div",{staticClass:"language-shell line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-shell"}},[r("code",[t._v("使用pprof工具查看堆配置文件：\ngo tool pprof "),r("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-http")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(":6060 http://localhost:8088/debug/pprof/heap?seconds"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v("\n\n或者查看30秒钟的CPU配置文件：\ngo tool pprof "),r("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-http")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(":6060 http://localhost:8088/debug/pprof/profile\n\n或者在程序中调用runtime.SetBlockProfileRate之后查看goroutine阻止配置文件：\ngo tool pprof "),r("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-http")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(":6060 http://localhost:8088/debug/pprof/block\n\n或者收集5秒钟的执行轨迹\ngo tool pprof "),r("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-http")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(":6060 http://localhost:8088/debug/pprof/trace?seconds"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v("\n\n或者在程序中调用runtime.SetMutexProfileFraction之后查看争用互斥锁的持有者：\ngo tool pprof "),r("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-http")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(":6060 http://localhost:8088/debug/pprof/mutex\n\n要查看所有可用的配置文件，请在浏览器中打开http://localhost:6060/debug/pprof/\n")])]),t._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[t._v("1")]),r("br"),r("span",{staticClass:"line-number"},[t._v("2")]),r("br"),r("span",{staticClass:"line-number"},[t._v("3")]),r("br"),r("span",{staticClass:"line-number"},[t._v("4")]),r("br"),r("span",{staticClass:"line-number"},[t._v("5")]),r("br"),r("span",{staticClass:"line-number"},[t._v("6")]),r("br"),r("span",{staticClass:"line-number"},[t._v("7")]),r("br"),r("span",{staticClass:"line-number"},[t._v("8")]),r("br"),r("span",{staticClass:"line-number"},[t._v("9")]),r("br"),r("span",{staticClass:"line-number"},[t._v("10")]),r("br"),r("span",{staticClass:"line-number"},[t._v("11")]),r("br"),r("span",{staticClass:"line-number"},[t._v("12")]),r("br"),r("span",{staticClass:"line-number"},[t._v("13")]),r("br"),r("span",{staticClass:"line-number"},[t._v("14")]),r("br"),r("span",{staticClass:"line-number"},[t._v("15")]),r("br"),r("span",{staticClass:"line-number"},[t._v("16")]),r("br")])])])}),[],!1,null,null,null);r.default=e.exports}}]);